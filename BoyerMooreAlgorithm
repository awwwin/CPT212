#include <iostream>
#include <vector>
using namespace std;

#define ALPHABET_SIZE 256

// Function to initialize and fill the bad character table.
void createBadCharTable(const string &pattern, int badCharTable[ALPHABET_SIZE]) {
    int m = pattern.size();
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        badCharTable[i] = -1;
    }
    for (int i = 0; i < m; i++) {
        badCharTable[(int)pattern[i]] = i;
    }
}

// Function to preprocess the pattern and create the good suffix tables.
void createGoodSuffixTable(const string &pattern, vector<int> &borderPosition, vector<int> &shiftTable) {
    int m = pattern.size();
    int i = m, j = m + 1;
    borderPosition[i] = j;

    while (i > 0) {
        while (j <= m && pattern[i - 1] != pattern[j - 1]) {
            if (shiftTable[j] == 0) {
                shiftTable[j] = j - i;
            }
            j = borderPosition[j];
        }
        i--;
        j--;
        borderPosition[i] = j;
    }

    j = borderPosition[0];
    for (i = 0; i <= m; i++) {
        if (shiftTable[i] == 0) {
            shiftTable[i] = j;
        }
        if (i == j) {
            j = borderPosition[j];
        }
    }
}

// Boyer-Moore search function using both bad character and good suffix heuristics.
void boyerMooreSearch(const string &text, const string &pattern) {
    int m = pattern.size();
    int n = text.size();

    int badCharTable[ALPHABET_SIZE];
    vector<int> borderPosition(m + 1);
    vector<int> shiftTable(m + 1, 0);

    // Create the bad character table.
    createBadCharTable(pattern, badCharTable);

    // Create the good suffix table.
    createGoodSuffixTable(pattern, borderPosition, shiftTable);

    int shift = 0;
    bool found = false;

    while (shift <= (n - m)) {
        int j = m - 1;

        // Reduce index j of pattern while characters of pattern and text match at this shift.
        while (j >= 0 && pattern[j] == text[shift + j]) {
            j--;
        }

        // If the pattern is present at the current shift, then index j will become -1.
        if (j < 0) {
            cout << "Pattern found at index: " << shift << endl;
            found = true;
            shift += shiftTable[0];
        } else {
            // Shift the pattern according to the maximum value from the bad character and good suffix tables.
            shift += max(shiftTable[j + 1], j - badCharTable[text[shift + j]]);
        }
    }

    if (!found) {
        cout << "No pattern found" << endl;
    }
}

// Main function to test the Boyer-Moore search implementation.
int main() {
    string text;
    string pattern;

    // Prompt the user to enter the text and the pattern.
    cout << "Enter the text: ";
    getline(cin, text);
    cout << "Enter the pattern: ";
    getline(cin, pattern);

    boyerMooreSearch(text, pattern);   // Call function to search for the pattern in the text.
    return 0;
}

